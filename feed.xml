<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://github.com/hoonze/</id><title>ho_on Tech Blog</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-05-20T18:13:40+09:00</updated> <author> <name>Ji Hoon Byun</name> <uri>https://github.com/hoonze/</uri> </author><link rel="self" type="application/atom+xml" href="https://github.com/hoonze/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://github.com/hoonze/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Ji Hoon Byun </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Stream API</title><link href="https://github.com/hoonze/posts/Stream-API/" rel="alternate" type="text/html" title="Stream API" /><published>2022-05-20T16:50:00+09:00</published> <updated>2022-05-20T16:50:00+09:00</updated> <id>https://github.com/hoonze/posts/Stream-API/</id> <content src="https://github.com/hoonze/posts/Stream-API/" /> <author> <name>Ji Hoon Byun</name> </author> <category term="Language" /> <category term="JAVA" /> <summary> Stream API란? Strem API 특징 Immutable(불변)하므로 원본의 데이터를 변경하지 않는다. 재사용이 불가능하다. 즉, 일회용이다. 내부 반복(internal iteration)으로 작업을 처리한다. filter-map 기반의 API를 사용하여 지연(lazy) 연산을 통해 성능을 최적화한다. 1. 원본의 데이터를 변경하지 않는다. 스트림은 데이터를 읽는 것이므로 원본 데이터, 즉 데이터 소스를 변경하지 않는다. 스트림 연산을 통해서 아무리 데이터를 조작한다 해도 스트림에서는 데이터를 변경하지 않는다. 예를 들어 아래와 같이 1 ~ 7의 정수 값이 역순으로 들어간 리스트인 list가 있다. 이 리스트를 Stream을 사용해 역순으로 정렬해 sortedList... </summary> </entry> <entry><title>equals()와 hashCode()</title><link href="https://github.com/hoonze/posts/equals()%EC%99%80-hashCode()/" rel="alternate" type="text/html" title="equals()와 hashCode()" /><published>2022-04-21T17:44:00+09:00</published> <updated>2022-04-21T19:55:37+09:00</updated> <id>https://github.com/hoonze/posts/equals()%EC%99%80-hashCode()/</id> <content src="https://github.com/hoonze/posts/equals()%EC%99%80-hashCode()/" /> <author> <name>Ji Hoon Byun</name> </author> <category term="Language" /> <category term="JAVA" /> <summary> 이 포스트는 면접 과정에서 받은 “HashMap에서 키가 같은지 어떻게 판단하는가?”라는 질문에서 시작됐다. 이 질문을 받을 당시 “Map의 Key값에는 객체가 들어갈 수 도 있는데 기본 정의된 equals 메서드로는 두 객체가 같은지 판단할 수 없다”라고 생각해 제대로된 답변을 하지 못했다. 이 질문에 대한 해답을 찾고자 공부한 내용을 적어본다. equals()란? 내용 비교 메서드로 해당 주소의 데이터 값을 비교하는 메서드이다. Object의 기본equals메서드는 내부적으로 == 연산(참조 비교 연산)을 해 == 과 같은 결과를 리턴한다. hashCode()란? 객체를 식별하는 하나의 정수 값으로 두 객체의 동일성을 판단한다. Object의 hashCode 메서드는 객... </summary> </entry> </feed>
